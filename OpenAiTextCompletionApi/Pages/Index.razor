@page "/"
@using OpenAiTextCompletionApi.Services
@using OpenAiTextCompletionApi.Data
@using OpenAiTextCompletionApi.Models
@inject OpenAIService openAIService

<div class="container d-flex flex-column vh-100">
    @if (Messages.Count == 0)
    {
        <div class="text-center">
            <h3>Welcome to CsharpBot !</h3>
            <p>Welcome to the C# learning assistant, I'm here to help you master c# programming.</p>
        </div>
    }

    <div class="flex-grow-1">
        @foreach (var message in Messages)
        {
            <div class="row p-2">
                <div class="col-1 rounded-circle bg-dark-subtle text-center m-2 p-0"
                     style="width:50px;height:50px;">
                    <span class="bi fs-2 @(message.IsUser ? "bi-person-fill" : "bi-robot")"></span>
                </div>
                <div class="col-11 rounded p-3 shadow-sm @(message.IsUser ? "text-bg-primary" : "text-bg-light")">
                    @if (message.IsUser)
                    {
                        @message.content
                    }
                    else
                    {
                        @((MarkupString)message.content)
                    }
                </div>
            </div>
        }
    </div>

    <div class="sticky-bottom w-50 p-3 rounded mx-auto">
        @if (_isSendingMessage)
        {
            <div class="text-center">
                <div class="spinner-border spinner-border-sm" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        <div class="input-group">
            <button class="btn btn-primary" style="box-shadow: none;" @onclick="ClearConversation">
                <span class="bi bi-eraser"></span>
            </button>
            <textarea rows="3" class="form-control" placeholder="Ask your question..." style="box-shadow: none; resize:none;"
                      @bind-value="_userQuestion" @bind-value:event="oninput" @onkeypress="HandleKeyPress"
                      disabled="@_isSendingMessage" />
        </div>
    </div>
</div>

@code {
    private string _userQuestion = string.Empty;
    private readonly List<Message> _conversationHistory = new();
    private bool _isSendingMessage;
    private readonly string _chatBotKnowledgeScope = "" +
        "Your name is CsharpBot, You are an assistant that help users learn C#." +
        "When user's question is not related to C# or the .NET framework, reply politely that you can not answer" +
        "format every response in HTML.";

    protected override Task OnInitializedAsync()
    {
        _conversationHistory.Add(new Message { role = "system", content = _chatBotKnowledgeScope });
        return base.OnInitializedAsync();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key is not "Enter") return;
        await SendMessage();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_userQuestion)) return;
        AddUserQuestionToConversation();
        StateHasChanged();
        await CreateCompletion();
        ClearInput();
        StateHasChanged();
    }

    private void ClearInput() => _userQuestion = string.Empty;

    private void ClearConversation()
    {
        ClearInput();
        _conversationHistory.Clear();
    }

    private async Task CreateCompletion()
    {
        _isSendingMessage = true;
        var assistantResponse = await OpenAIService.CreateChatCompletion(_conversationHistory);
        _conversationHistory.Add(assistantResponse);
        _isSendingMessage = false;
    }

    private void AddUserQuestionToConversation()
        => _conversationHistory.Add(new Message { role = "user", content = _userQuestion });

    [Inject]
    public OpenAIService OpenAIService { get; set; }

    public List<Message> Messages => _conversationHistory.Where(c => c.role is not "system").ToList();
}
